using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using SFB;

[RequireComponent(typeof(Button))]
public class SaveGPLPalette : MonoBehaviour, IPointerDownHandler
{
    const string MENU_TITLE = "Sava as Gimp GPL color palette";
    private string _data;

    public void Awake()
    {
        useGUILayout = false;
    }

#if UNITY_WEBGL && !UNITY_EDITOR
    //
    // WebGL
    //
    [DllImport("__Internal")]
    private static extern void DownloadFile(string gameObjectName, string methodName, string filename, byte[] byteArray, int byteArraySize);

    // Broser plugin should be called in OnPointerDown.
    public void OnPointerDown(PointerEventData eventData)
    {
        if (ImageUtilities.input_palette.Count == 0) return;
        SaveFile();
        var bytes = Encoding.UTF8.GetBytes(_data);
        DownloadFile(gameObject.name, "OnFileDownload", ImageUtilities.filename + ".gpl", bytes, bytes.Length);
    }

    // Called from browser
    public void OnFileDownload()
    {
        //output.text = "File Successfully Downloaded";
    }
#else
    //
    // Standalone platforms & editor
    //
    public void OnPointerDown(PointerEventData eventData) { }

    // Listen OnClick event in standlone builds
    void Start()
    {
        (GetComponent<Button>()).onClick.AddListener(OnClick);
    }

    public void OnClick()
    {
        if (ImageUtilities.input_palette.Count == 0) return;

        var path = StandaloneFileBrowser.SaveFilePanel(MENU_TITLE, "", ImageUtilities.filename, "gpl");
        if (!string.IsNullOrEmpty(path))
        {
            SaveFile();
            File.WriteAllText(path, _data);
        }
    }
#endif

    public void SaveFile()
    {
        int i;
        StringBuilder sb = new StringBuilder(1000);
        List<ColorPlus> palette = new List<ColorPlus>();

        // only save colors that meet transparency thresh hold
        for (i = 0; i < ImageUtilities.input_palette.Count; i++)
        {
            if (ImageUtilities.input_palette[i].alpha > ImageUtilities.transparent_threshhold)
                palette.Add(ImageUtilities.input_palette[i]);
        }

        if (ImageUtilities.sort_saved_palette)
        {
            // sort colors according to current criteria
            palette = ImageUtilities.StepSort(palette);
        }

        sb.AppendFormat("GIMP Palette\r\nName: {0}\r\n# This file generated by Color Palette Swapper\r\n# https://williamthompsonj.github.io/Color-Palette-Swapper/\r\n#", ImageUtilities.filename);

        for (i = 0; i < palette.Count; i++)
        {
            // don't save transparent colors, this palette format doesn't support transparency!
            if (palette[i].alpha <= ImageUtilities.transparent_threshhold)
                continue;

             sb.AppendFormat("\r\n{0}\tindex {1}", ImageUtilities.ToGPL(palette[i].color32), 1+i);
        }

        _data = sb.ToString();
    }
}